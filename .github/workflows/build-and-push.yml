name: Build & Push

on:
  push:
    branches: [deploy]
  workflow_dispatch:

jobs:
  publish:
    name: Publish Iot-Commons to GitHub Package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      - name: Deploy to GitHub
        run: mvn --batch-mode -DuseGitHubPackages=true deploy --file iot-commons/pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

  owasp:
    needs: publish
    name: OWASP ZAP SCANS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define both the service name and corresponding port for each service
        include:
          - service: iot-core-service
            service_port: 8002
          - service: iot-bridge-service
            service_port: 8001
          - service: iot-user-service
            service_port: 8003

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Maven settings
        uses: s4u/maven-settings-action@v2.5.0
        with:
          servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.DEPLOY_GITHUB_TOKEN }}"}}}}]'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file ${{ matrix.service }}/pom.xml

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker Image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t alexdragnea/disertatie-${{ matrix.service }}:latest .

      - name: Run Docker Container for ${{ matrix.service }}
        run: |
          docker-compose -f ./docker-compose.yml up -d ${{ matrix.service }}

      - name: OWASP ZAP Baseline Scan for ${{ matrix.service }}
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: "http://localhost:${{ matrix.service_port }}"  # Each service will use its specified port here
          issue_title: "OWASP Security Testing for ${{ matrix.service }}"

  build_and_push:
    name: Build & Push to DockerHub
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [iot-core-service, iot-discovery-service, iot-bridge-service, iot-gateway-service, iot-user-service]  

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Set up Maven settings
        uses: s4u/maven-settings-action@v2.5.0
        with:
          servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.DEPLOY_GITHUB_TOKEN }}"}}}}]'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file ${{ matrix.service }}/pom.xml

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Build and Push to DockerHub
        run: |
          cd ${{ matrix.service }}
          docker build -t alexdragnea/disertatie-${{ matrix.service }}:latest .
          docker push alexdragnea/disertatie-${{ matrix.service }}:latest
