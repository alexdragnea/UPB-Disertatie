name: Build & Push

on:
  push:
    branches: [deploy]
  workflow_dispatch:
jobs:
  publish:
    name: Publish Iot-Commons to GitHub Package
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      - name: Deploy to GitHub
        run: mvn --batch-mode -DuseGitHubPackages=true deploy --file iot-commons/pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

  dashboard_build_and_push:
    name: Build & Push IoT Dashboard
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: iot-dashboard

      - name: Build IoT Dashboard
        run: npm run build
        working-directory: iot-dashboard

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          cd iot-dashboard
          docker build -t alexdragnea/disertatie-iot-dashboard:latest .
          docker push alexdragnea/disertatie-iot-dashboard:latest

  build_and_push:
    name: Build & Push to DockerHub
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [iot-core-service, iot-discovery-service, iot-bridge-service, iot-gateway-service, iot-user-service]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: iot-dashboard

      - name: Build IoT Dashboard
        run: npm run build
        working-directory: iot-dashboard
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Maven settings
        uses: s4u/maven-settings-action@v2.5.0
        with:
          servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.DEPLOY_GITHUB_TOKEN }}"}}}}]'


      - name: Build with Maven
        run: mvn -B package -DskipTests --file ${{ matrix.service }}/pom.xml

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Build and Push to DockerHub
        run: |
          cd ${{ matrix.service }}
          docker build -t alexdragnea/disertatie-${{ matrix.service }}:latest .
          docker push alexdragnea/disertatie-${{ matrix.service }}:latest

  owasp:
      name: Build & OWASP ZAP Scans
      runs-on: ubuntu-latest
      needs: publish
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Set up JDK
          uses: actions/setup-java@v1
          with:
            java-version: '21'

        - name: Set up Maven settings
          uses: s4u/maven-settings-action@v2.5.0
          with:
            servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.DEPLOY_GITHUB_TOKEN }}"}}}}]'

        # Build all services
        - name: Build iot-core-service
          run: mvn -B package -DskipTests --file iot-core-service/pom.xml

        - name: Build iot-discovery-service
          run: mvn -B package -DskipTests --file iot-discovery-service/pom.xml

        - name: Build iot-bridge-service
          run: mvn -B package -DskipTests --file iot-bridge-service/pom.xml

        - name: Build iot-gateway-service
          run: mvn -B package -DskipTests --file iot-gateway-service/pom.xml

        - name: Build iot-user-service
          run: mvn -B package -DskipTests --file iot-user-service/pom.xml

        # Install and verify Docker Compose
        - name: Install jq (JSON processor)
          run: sudo apt-get install -y jq

        - name: Set up Docker Compose
          run: |
            curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker-compose --version

        # Start Docker Compose and run OWASP ZAP Scans
        - name: Start All Services with Docker Compose
          run: docker-compose up -d

        - name: Wait for Services to be Ready
          run: sleep 120  # Adjust sleep time as needed

        # Run OWASP ZAP scan for each service
        - name: OWASP ZAP Full Scan for IoT User Service
          uses: zaproxy/action-full-scan@v0.11.0
          with:
            target: 'http://localhost:8003'
            fail_action: "false"
            issue_title: OWASP Security Testing - IoT User Service

        - name: OWASP ZAP Full Scan for IoT Core Service
          uses: zaproxy/action-full-scan@v0.11.0
          with:
            target: 'http://localhost:8002'
            fail_action: "false"
            issue_title: OWASP Security Testing - IoT Core Service

        - name: OWASP ZAP Full Scan for IoT Bridge Service
          uses: zaproxy/action-full-scan@v0.11.0
          with:
            target: 'http://localhost:8001'
            fail_action: "false"
            issue_title: OWASP Security Testing - IoT Bridge Service

        - name: OWASP ZAP Full Scan for IoT Gateway Service
          uses: zaproxy/action-full-scan@v0.11.0
          with:
            target: 'https://localhost:8888'
            fail_action: "false"
            issue_title: OWASP Security Testing - IoT Gateway Service


        - name: Shut down all containers
          run: docker-compose down
